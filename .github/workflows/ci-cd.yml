# ============================================
# Pipeline CI/CD Completo
# ============================================
# Este workflow automatiza todo el proceso de integraci√≥n y despliegue continuo
# Incluye: tests, an√°lisis de calidad, seguridad y construcci√≥n de im√°genes Docker

name: üöÄ Pipeline CI/CD

# ============================================
# Eventos que disparan el pipeline
# ============================================
on:
  # Se ejecuta cuando hay un push a estas ramas
  push:
    branches: [ main, develop ]
  
  # Se ejecuta cuando hay un pull request hacia estas ramas
  pull_request:
    branches: [ main, develop ]

jobs:
  # ============================================
  # JOB 1: Construcci√≥n, Tests y An√°lisis
  # ============================================
  # Este job se ejecuta SIEMPRE en todas las ramas
  build-and-test:
    name: üß™ Construcci√≥n, Tests y An√°lisis de Calidad
    runs-on: ubuntu-latest  # M√°quina virtual Ubuntu m√°s reciente
    
    steps:
      # ----------------------------------------
      # PASO 1: Descargar el c√≥digo del repositorio
      # ----------------------------------------
      - name: üì• Descargar c√≥digo del repositorio
        uses: actions/checkout@v4

      # ----------------------------------------
      # PASO 2: Configurar Node.js versi√≥n 18
      # ----------------------------------------
      - name: ‚öôÔ∏è Configurar Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: '18'  # Versi√≥n de Node.js a utilizar

      # ----------------------------------------
      # PASO 3: Instalar dependencias del proyecto
      # ----------------------------------------
      # npm ci es m√°s r√°pido y confiable que npm install para CI/CD
      # porque instala exactamente las versiones del package-lock.json
      - name: üì¶ Instalar dependencias
        run: npm ci

      # ----------------------------------------
      # PASO 4: Ejecutar linting (an√°lisis de c√≥digo)
      # ----------------------------------------
      # ESLint verifica que el c√≥digo siga las reglas de estilo
      # y detecta errores potenciales
      - name: üîç Ejecutar an√°lisis de c√≥digo (ESLint)
        run: npm run lint

      # ----------------------------------------
      # PASO 5: Ejecutar tests unitarios con cobertura
      # ----------------------------------------
      # Jest ejecuta todos los tests y genera un informe de cobertura
      # que indica qu√© porcentaje del c√≥digo est√° testeado
      - name: ‚úÖ Ejecutar tests unitarios
        run: npm test

      # ----------------------------------------
      # PASO 6: Subir informe de cobertura como artefacto
      # ----------------------------------------
      # El informe se guarda como artefacto descargable en GitHub
      - name: üìä Subir informe de cobertura
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report  # Nombre del artefacto
          path: coverage/        # Carpeta que contiene el informe

      # ----------------------------------------
      # PASO 7: Mostrar resumen de cobertura en GitHub
      # ----------------------------------------
      # A√±ade un resumen visual de la cobertura en la p√°gina del workflow
      - name: üìà Mostrar resumen de cobertura
        run: |
          echo "### üìä Resumen de Cobertura de Tests" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat coverage/coverage-summary.txt || echo "No se encontr√≥ el resumen de cobertura"
          echo '```' >> $GITHUB_STEP_SUMMARY

      # ----------------------------------------
      # PASO 8: An√°lisis est√°tico con SonarCloud
      # ----------------------------------------
      # SonarCloud analiza la calidad del c√≥digo, detecta bugs,
      # vulnerabilidades y code smells (c√≥digo con mal olor)
      - name: üî¨ An√°lisis de calidad con SonarCloud
        uses: SonarSource/sonarqube-scan-action@v6
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}         # Token de autenticaci√≥n
          SONAR_HOST_URL: https://sonarcloud.io          # URL de SonarCloud

      # ----------------------------------------
      # PASO 9: An√°lisis de vulnerabilidades con Snyk (Test)
      # ----------------------------------------
      # Snyk escanea las dependencias en busca de vulnerabilidades conocidas
      # continue-on-error: true permite que el pipeline contin√∫e aunque encuentre vulnerabilidades
      - name: üõ°Ô∏è Escanear vulnerabilidades con Snyk
        uses: snyk/actions/node@master
        continue-on-error: true  # No falla el pipeline si encuentra vulnerabilidades
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: test  # Comando para analizar vulnerabilidades
          
      # ----------------------------------------
      # PASO 10: Monitorear proyecto en Snyk
      # ----------------------------------------
      # Este comando env√≠a informaci√≥n a Snyk para monitoreo continuo
      # y recibir alertas de nuevas vulnerabilidades
      - name: üì° Enviar proyecto a monitoreo de Snyk
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: monitor  # Comando para monitorear el proyecto

      # ----------------------------------------
      # PASO 11: Resumen del Job Build & Test
      # ----------------------------------------
      - name: üìã Generar resumen del job
        if: always()
        run: |
          echo "## ‚úÖ Build y Tests Completados" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Paso | Estado |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| üì¶ Instalaci√≥n de dependencias | ‚úÖ Completado |" >> $GITHUB_STEP_SUMMARY
          echo "| üîç Linting (ESLint) | ‚úÖ Completado |" >> $GITHUB_STEP_SUMMARY
          echo "| ‚úÖ Tests unitarios | ‚úÖ Completado |" >> $GITHUB_STEP_SUMMARY
          echo "| üî¨ SonarCloud | ‚úÖ Completado |" >> $GITHUB_STEP_SUMMARY
          echo "| üõ°Ô∏è Snyk | ‚úÖ Completado |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìä M√©tricas" >> $GITHUB_STEP_SUMMARY
          echo "- **Cobertura**: Ver secci√≥n anterior" >> $GITHUB_STEP_SUMMARY
          echo "- **Quality Gate**: Verificar en [SonarCloud](https://sonarcloud.io)" >> $GITHUB_STEP_SUMMARY
          echo "- **Vulnerabilidades**: Verificar en [Snyk](https://app.snyk.io)" >> $GITHUB_STEP_SUMMARY

  # ============================================
  # JOB 2: Construcci√≥n y Publicaci√≥n de Docker
  # ============================================
  # Este job SOLO se ejecuta en la rama 'main' despu√©s de un push exitoso
  build-docker:
    name: üê≥ Construcci√≥n y Publicaci√≥n de Imagen Docker
    runs-on: ubuntu-latest
    
    # Este job depende de que build-and-test termine exitosamente
    needs: build-and-test
    
    # Solo se ejecuta si:
    # 1. La rama es 'main'
    # 2. El evento es un 'push' (no un pull request)
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      # ----------------------------------------
      # PASO 1: Descargar el c√≥digo
      # ----------------------------------------
      - name: üì• Descargar c√≥digo del repositorio
        uses: actions/checkout@v4

      # ----------------------------------------
      # PASO 2: Configurar Docker Buildx
      # ----------------------------------------
      # Buildx es una herramienta avanzada de Docker para construir im√°genes
      # con caracter√≠sticas como multi-plataforma y cach√© mejorado
      - name: üîß Configurar Docker Buildx
        uses: docker/setup-buildx-action@v3

      # ----------------------------------------
      # PASO 3: Login en Docker Hub
      # ----------------------------------------
      # Autenticarse en Docker Hub para poder hacer push de la imagen
      - name: üîê Iniciar sesi√≥n en Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}  # Usuario de Docker Hub
          password: ${{ secrets.DOCKERHUB_TOKEN }}     # Token de acceso

      # ----------------------------------------
      # PASO 4: Extraer metadatos para las etiquetas
      # ----------------------------------------
      # Genera autom√°ticamente las etiquetas (tags) para la imagen Docker
      # Ejemplo: latest, main-sha-abc123
      - name: üè∑Ô∏è Generar etiquetas para la imagen
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/my-api-cicd
          tags: |
            type=sha,prefix={{branch}}-    # Tag con el hash del commit
            type=raw,value=latest          # Tag 'latest'

      # ----------------------------------------
      # PASO 5: Construir y publicar imagen Docker
      # ----------------------------------------
      # Construye la imagen usando el Dockerfile y la sube a Docker Hub
      # Utiliza cach√© de GitHub Actions para acelerar builds futuros
      - name: üèóÔ∏è Construir y publicar imagen Docker
        uses: docker/build-push-action@v5
        with:
          context: .                                    # Usar el directorio actual
          push: true                                    # Subir la imagen a Docker Hub
          tags: ${{ steps.meta.outputs.tags }}         # Tags generadas anteriormente
          labels: ${{ steps.meta.outputs.labels }}     # Etiquetas de metadatos
          cache-from: type=gha                          # Usar cach√© de GitHub Actions
          cache-to: type=gha,mode=max                   # Guardar cach√© completa

      # ----------------------------------------
      # PASO 6: Probar la imagen Docker
      # ----------------------------------------
      # Descarga la imagen reci√©n publicada y verifica que funcione correctamente
      - name: üß™ Probar imagen Docker
        run: |
          # Descargar la imagen desde Docker Hub
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/my-api-cicd:latest
          
          # Ejecutar contenedor en segundo plano
          docker run -d -p 3000:3000 --name test-container ${{ secrets.DOCKERHUB_USERNAME }}/my-api-cicd:latest
          
          # Esperar 5 segundos a que la app se inicie
          sleep 5
          
          # Hacer petici√≥n al health check - falla si no responde correctamente
          curl -f http://localhost:3000/health || exit 1
          
          # Detener y eliminar el contenedor de prueba
          docker stop test-container
          docker rm test-container

      # ----------------------------------------
      # PASO 7: Mostrar informaci√≥n del build
      # ----------------------------------------
      # A√±ade un resumen del build exitoso en la p√°gina del workflow
      - name: üìù Mostrar informaci√≥n del build
        run: |
          echo "## üê≥ Build de Docker Exitoso ‚úÖ" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üì¶ Detalles de la Imagen" >> $GITHUB_STEP_SUMMARY
          echo "| Propiedad | Valor |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Imagen** | \`${{ secrets.DOCKERHUB_USERNAME }}/my-api-cicd:latest\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **SHA del commit** | \`${{ github.sha }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Rama** | \`${{ github.ref_name }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Autor** | ${{ github.actor }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîó Enlaces" >> $GITHUB_STEP_SUMMARY
          echo "- [Ver imagen en Docker Hub](https://hub.docker.com/r/${{ secrets.DOCKERHUB_USERNAME }}/my-api-cicd)" >> $GITHUB_STEP_SUMMARY
          echo "- [Ver commit](https://github.com/${{ github.repository }}/commit/${{ github.sha }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ‚úÖ Pasos Completados" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Imagen construida correctamente" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Imagen publicada en Docker Hub" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Health check verificado" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "> üöÄ La imagen est√° lista para ser desplegada por ArgoCD" >> $GITHUB_STEP_SUMMARY