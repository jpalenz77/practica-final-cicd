# ============================================
# Configuración de SonarCloud
# ============================================
# SonarCloud analiza la calidad del código, detecta bugs,
# vulnerabilidades y problemas de mantenibilidad

# ============================================
# Identificación del proyecto
# ============================================

# Clave única del proyecto en SonarCloud
# Formato: usuario_nombre-repositorio
sonar.projectKey=jpalenz77_practica-final-cicd

# Clave de la organización en SonarCloud
# Debe coincidir con tu organización en https://sonarcloud.io
sonar.organization=moids77

# ============================================
# Información del proyecto
# ============================================

# Nombre del proyecto (se muestra en la UI de SonarCloud)
sonar.projectName=practica-final-cicd

# Versión del proyecto
# Se puede actualizar en cada release para tracking
sonar.projectVersion=1.0

# ============================================
# Rutas de código fuente y tests
# ============================================

# Directorio que contiene el código fuente a analizar
# SonarCloud solo analizará archivos en esta ruta
sonar.sources=src

# Directorio que contiene los tests
# Se usa para calcular cobertura y distinguir código de tests
sonar.tests=tests

# ============================================
# Configuración de codificación
# ============================================

# Codificación de caracteres del código fuente
# UTF-8 es el estándar y soporta todos los caracteres especiales
sonar.sourceEncoding=UTF-8

# ============================================
# Informes de cobertura
# ============================================

# Ruta al informe de cobertura en formato LCOV
# Jest genera este archivo automáticamente al ejecutar tests
# SonarCloud lo lee para mostrar qué código está cubierto por tests
sonar.javascript.lcov.reportPaths=coverage/lcov.info

# ============================================
# Exclusiones
# ============================================

# Archivos y carpetas que NO se deben analizar
# Separados por comas
sonar.exclusions=**/node_modules/**,**/coverage/**,**/dist/**

# Explicación de las exclusiones:
# - **/node_modules/** : Librerías de terceros (no necesitan análisis)
# - **/coverage/**     : Informes de cobertura (archivos generados)
# - **/dist/**         : Código compilado/transpilado (archivos generados)

# ============================================
# Métricas que SonarCloud analiza:
# ============================================
# 🐛 BUGS: Errores en el código que pueden causar comportamiento incorrecto
# 🔒 VULNERABILITIES: Problemas de seguridad que pueden ser explotados
# 💩 CODE SMELLS: Código que funciona pero es difícil de mantener
# 📊 COVERAGE: Porcentaje de código cubierto por tests
# 🔄 DUPLICATIONS: Código duplicado que debería refactorizarse
# 📏 COMPLEXITY: Complejidad ciclomática (qué tan complicado es el código)

# ============================================
# Quality Gate (Puerta de calidad):
# ============================================
# SonarCloud define un "Quality Gate" que el proyecto debe pasar
# Por defecto requiere:
# - 0 bugs nuevos
# - 0 vulnerabilidades nuevas
# - Cobertura >= 80% en código nuevo
# - Duplicación <= 3% en código nuevo
# - Calificación A o B en código nuevo

# ============================================
# Uso en el pipeline:
# ============================================
# El análisis se ejecuta automáticamente en GitHub Actions:
# 1. Los tests generan el informe de cobertura (coverage/lcov.info)
# 2. SonarCloud Scanner lee este archivo y el código fuente
# 3. Analiza todo y envía resultados a https://sonarcloud.io
# 4. Los resultados se ven en la UI de SonarCloud
# 5. Si no pasa el Quality Gate, se puede configurar para que falle el build